let verify,User;_b83‍.x([["authGuard",()=>authGuard]]);_b83‍.w("jsonwebtoken",[["verify",["verify"],function(v){verify=v}]]);_b83‍.w("../models/User",[["default",["User"],function(v){User=v}]]);

       const authGuard = async(req,res,next) => {
    if(req.headers.authorization && req.headers.startsWith("Bearer")){
        try {
            const token = req.headers.authorization.split(" ")[1];
            const {id} = verify(token,process.env.JWT_TOKEN);
            req.user = await User.findById(id).select("-password");
            next();
        } catch (error) {
            let err = new Error("Not Authorized, Token Failed");
            err.statusCode = 401;
            next(err);
        }
    }
    else{
        let error = new Error("Not Authorized, No Token Found");
        error.statusCode=401;
        next(error);

    }
}